#pragma once
#include <haste/v2list>
#include <haste/string>

namespace haste::nd {

enum class dtype { i8, i16, i32, i64, u8, u16, u32, u64, f32, f64 };

struct shape : public v2::ilist<usize> {
  template <class... T> shape(T... d) {
    _data = { usize(d)... };
  }

private:
  list<usize> _data;
};

struct strides { };

struct array {
public:


  array();
  ~array();



  array at() const;
  array& at();



  string to_string() const;



  nd::shape shape() const;
  nd::strides strides() const;
  usize ndim() const;
  usize size() const;
  usize itemsize() const;
  usize nbytes() const;


  array reshape(ilist<usize> shape);

private:
  char _impl[64];
};

array zeros();
array empty(nd::shape shape, nd::dtype dtype);


template <class T> struct array_view {
public:

  T at() const;
  T& at();


private:
  T* _data;
  usize* _strides;
};

}
