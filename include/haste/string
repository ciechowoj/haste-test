#pragma once
#include <haste/v2list>

namespace haste {

class string {
public:
  string() = default;

  string(const string& that)
    : string(allocator(), that) { }

  string(allocator memalloc, const string& that);

  string(string&& that) {
    _data = that._data;
    _size = that._size;
    that = string();
  }

  ~string();

  string(usize size, const char* data);

  template <usize N> string(const char (&data)[N])
    : string(N - 1, data) { }

  template <class... X> string(const X&... x) {
    static_assert(Same<char, X...>, "All types in the initializer list should be the same.");
    _size = sizeof...(X);
    _alloc();
    detail::Emplace<char, X...>::emplace(_data, 0, x...);
    _data[_size] = 0;
  }

  string& operator=(const string& that) {
    return *this = std::move(string(that));
  }

  string& operator=(string&& that) {
    std::swap(that._data, _data);
    std::swap(that._size, _size);
    return *this;
  }

  char operator[](usize i) const { return _data[i]; }
  const char* data() const { return _data ? _data : ""; }
  usize size() const { return _size; }
  allocator memalloc() const;

  bool operator==(const string& that) const {
    return this->_data == that._data || _eq(that);
  }

  bool operator!=(const string& that) const {
    return !(*this == that);
  }

  bool operator==(const char* that) const {
    return _eq(that);
  }

  bool operator!=(const char* that) const {
    return !_eq(that);
  }

private:
  struct join_item {
    join_item() = default;

    template <usize N> join_item(const char (&data)[N])
      : begin(data), end(data + N - 1) { }

    join_item(const string& data)
      : begin(data.data()), end(data.data() + data.size()) { }

    const char* begin = nullptr;
    const char* end = nullptr;
  };

public:
  template <class... X> static string join(const X&... x) {
    join_item items[] = { join_item(), join_item(x)... };
    return string((usize)sizeof...(x), items + 1);
  }

private:
  char* _data = nullptr;
  usize _size = 0;

  bool _eq(const string& that) const;
  bool _eq(const char* that) const;
  void _alloc();
  void _alloc(allocator allocator);
  string(usize, join_item[]);
};

inline bool operator==(const char* a, const string& b) {
  return b == a;
}

inline bool operator!=(const char* a, const string& b) {
  return b != a;
}

}
