#pragma once
#include <haste/primitive>

namespace haste {

class allocator {
 public:
  constexpr allocator() = default;
  allocator(const allocator&);
  allocator(allocator&&);
  ~allocator();

  allocator& operator=(const allocator&);
  allocator& operator=(allocator&&);

  void* alloc(usize size) const;
  void* realloc(usize size, void* memory) const;
  void free(void* memory) const;

  usize capacity() const;
  usize usage() const;

  bool operator==(const allocator& that) const { return _impl == that._impl; }
  bool operator!=(const allocator& that) const { return !(*this == that); }

 private:
  struct _impl_t;
  static _impl_t _default;
  _impl_t* _impl = nullptr;

  allocator(_impl_t* impl);

  friend allocator explicit_allocator();
};

allocator explicit_allocator();

}
