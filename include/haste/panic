#pragma once
#include <exception>
#include <haste/string>

namespace haste {

enum class panic_reason {
  unknown,
  index_error,
};

[[noreturn]] void panic(const char* message);
void panic(panic_reason reason);

inline void panic_if(bool condition, const char* reason) {
  if (!condition) {
    panic(reason);
  }
}

inline void panic_if(bool condition, panic_reason reason) {
  if (!condition) {
    panic(reason);
  }
}

void warn(const char* message);

static_assert(sizeof(std::exception_ptr) == 8);



class runtime_error : public std::exception {
public:
	runtime_error() = default;

	runtime_error(string message) {
		_message = message;
	}

	template <class... X> runtime_error(const X&... x) {
    _message = string::join(x...);
  }

	virtual const char* what() const noexcept {
		return _message.data();
	}

private:
	string _message;
};






}




